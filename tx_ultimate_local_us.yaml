substitutions:
  name: "main-bedroom-tx5"
  friendly_name: "Main Bedroom TX5"

  relay_count: "4"

  vibra_time: 100ms
  button_on_time: 500ms

  button_brightness: "0.2"
  button_color: "{153,255,153}"

  button_off_brightness: "0.15"
  button_off_color: "{0,128,255}"

  nightlight: "on"
  nightlight_brightness: "0.15"
  nightlight_color: "{255,255,209}"

  latitude: "-26.703°"
  longitude: "27.808°"

  touch_brightness: "1"
  touch_color: "{0,255,255}"
  touch_effect: "Scan"

  long_press_brightness: "1"
  long_press_color: "{255,0,0}"
  long_press_effect: ""

  multi_touch_brightness: "1"
  multi_touch_color: "{0,0,0}"
  multi_touch_effect: "Rainbow"

  swipe_up_brightness: "1"
  swipe_up_color: "{0,255,0}"
  swipe_up_effect: ""

  swipe_down_brightness: "1"
  swipe_down_color: "{255,0,179}"
  swipe_down_effect: ""

  relay_1_pin: GPIO18
  relay_2_pin: GPIO17
  relay_3_pin: GPIO27
  relay_4_pin: GPIO23

  vibra_motor_pin: GPIO21
  pa_power_pin: GPIO26

  led_pin: GPIO13
  status_led_pin: GPIO33

  uart_tx_pin: GPIO19
  uart_rx_pin: GPIO22

  audio_lrclk_pin: GPIO4
  audio_bclk_pin: GPIO2
  audio_sdata_pin: GPIO15

  touchpanel_power_pin: GPIO5


esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  project:
    name: smarthomeyourself.tx_ultimate
    version: "1.0"

  on_boot:
    priority: -100
    then:
      - binary_sensor.template.publish:
          id: touchfield_1
          state: OFF
      - binary_sensor.template.publish:
          id: touchfield_2
          state: OFF
      - binary_sensor.template.publish:
          id: touchfield_3
          state: OFF
      - binary_sensor.template.publish:
          id: touchfield_4
          state: OFF
      - binary_sensor.template.publish:
          id: multi_touch
          state: OFF
      - binary_sensor.template.publish:
          id: swipe_up
          state: OFF
      - binary_sensor.template.publish:
          id: swipe_down
          state: OFF
      - binary_sensor.template.publish:
          id: long_press
          state: OFF
      - script.execute: refresh_led_default
      # - script.execute: refresh_nightlight


external_components:
#  - source: /config/esphome/my_components
  - source:
      type: git
      url: https://github.com/NeillHerbst/sonoff-tx-ultimate-for-esphome
      ref: main
    components: [tx_ultimate_touch]
    

globals:
  - id: nightlight_color
    type: int [3]
    restore_value: no
    initial_value: ${nightlight_color}
  - id: button_off_color
    type: int [3]
    restore_value: no
    initial_value: ${button_off_color}
  - id: button_color
    type: int [3]
    restore_value: no
    initial_value: ${button_color}
  - id: long_press_color
    type: int [3]
    restore_value: no
    initial_value: ${long_press_color}
  - id: multi_touch_color
    type: int [3]
    restore_value: no
    initial_value: ${multi_touch_color}
  - id: swipe_up_color
    type: int [3]
    restore_value: no
    initial_value: ${swipe_up_color}
  - id: swipe_down_color
    type: int [3]
    restore_value: no
    initial_value: ${swipe_down_color}
  - id: touch_color
    type: int [3]
    restore_value: no
    initial_value: ${touch_color}    

# ================================================================================================
#                                BINARY SENSORS
# ================================================================================================

binary_sensor:
  - platform: template
    name: "Touchfield 1"
    id: touchfield_1
    icon: "mdi:gesture-touch"
    on_press:
      - switch.toggle: relay_1
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_1
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Touchfield 2"
    id: touchfield_2
    icon: "mdi:gesture-touch"
    on_press:
      - switch.toggle: relay_2
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_2
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Touchfield 3"
    id: touchfield_3
    icon: "mdi:gesture-touch"
    on_press:
      - switch.toggle: relay_3
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_3
          state: OFF
      - script.execute: refresh_led_default
  
  - platform: template
    name: "Touchfield 4"
    id: touchfield_4
    icon: "mdi:gesture-touch"
    on_press:
      - switch.toggle: relay_4
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_4
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Swipe Up"
    id: swipe_up
    icon: "mdi:gesture-swipe-up"
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: swipe_up
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Swipe Down"
    icon: "mdi:gesture-swipe-down"
    id: swipe_down
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: swipe_down
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Multi Touch"
    id: multi_touch
    icon: "mdi:hand-back-right"
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: multi_touch
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Long Press"
    icon: "mdi:gesture-tap-hold"
    id: long_press
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: long_press
          state: OFF
      - script.execute: refresh_led_default
# ====================================================================================================
#                                                 SWITCHES
# ====================================================================================================
switch:
  # Switch for relay 1
  - platform: gpio
    id: relay_1
    name: "${friendly_name} L1"
    pin: ${relay_1_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default

  # Switch for relay 2
  - platform: gpio
    id: relay_2
    name: "${friendly_name} L2"
    pin: ${relay_2_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default
  
  # Switch for relay 3
  - platform: gpio
    id: relay_3
    name: "${friendly_name} L3"
    pin: ${relay_3_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default

  # Switch for relay 4
  - platform: gpio
    id: relay_4
    name: "${friendly_name} L4"
    pin: ${relay_4_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default

  # Switch for vibration motor
  - platform: gpio
    id: vibra
    pin: ${vibra_motor_pin}
    name: "${friendly_name} Vibration"
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - delay: ${vibra_time}
      - switch.turn_off: vibra

  - platform: gpio
    id: pa_power
    pin: ${pa_power_pin}
    name: "PA Power"
    internal: true
    restore_mode: ALWAYS_ON

  - platform: gpio
    name: "touch panel power"
    pin:
      number: ${touchpanel_power_pin}
      inverted: true
    id: touch_power
    internal: true
    restore_mode: RESTORE_DEFAULT_ON
    
  - platform: template
    name: "Do Not Disturb"
    optimistic: True
    id: do_not_disturb
    icon: "mdi:minus-circle"
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on: 
      then:
        - script.execute: refresh_led_default
    on_turn_off: 
      then:
        - script.execute: refresh_led_default

select:
  - platform: template
    name: "LED On Side"
    id: led_lights_on_side
    optimistic: True
    restore_value: True
    options:
      - Left
      - Right
      - Both
    initial_option: Right
  
  - platform: template
    name: "LED Off Side"
    id: led_lights_off_side
    optimistic: True
    restore_value: True
    options:
      - left
      - right
      - both
    initial_option: right
# ==============================================================================================================
#                                           LIGHTS
# ==============================================================================================================
light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: ${led_pin}
    num_leds: 32
    name: "NeoPixel Light"
    id: leds
    default_transition_length: 0.2s
    internal: True
    effects:
      - addressable_rainbow:
          name: "Rainbow"
          speed: 30
          width: 8
      - pulse:
          name: "Pulse"
          transition_length: 1.4s
          update_interval: 1s

  # partitions for lights on button 1
  - platform: partition
    name: "LEDs Button 1 Left"
    id: leds_button_1_left
    internal: true
    default_transition_length: 0.2s
    segments:
      - id: leds
        from: 23
        to: 23
  - platform: partition
    name: "LEDs Button 1 Right"
    id: leds_button_1_right
    internal: true
    default_transition_length: 0.2s
    segments:
      - id: leds
        from: 0
        to: 0

  
  # partitions for lights on button 2  
  - platform: partition
    name: "LEDs Button 2 Left"
    id: leds_button_2_left
    internal: true
    default_transition_length: 0.2s
    segments:
      - id: leds
        from: 21
        to: 21
  - platform: partition
    name: "LEDs Button 2 Right"
    id: leds_button_2_right
    internal: true
    default_transition_length: 0.2s
    segments:
      - id: leds
        from: 2
        to: 2

  # partition for lights on button 3
  - platform: partition
    name: "LEDs Button 3 Left"
    id: leds_button_3_left
    internal: true
    default_transition_length: 0.2s
    segments:
      - id: leds
        from: 19
        to: 19
  - platform: partition
    name: "LEDs Button 3 Right"
    id: leds_button_3_right
    internal: true
    default_transition_length: 0.2s
    segments:
      - id: leds
        from: 4
        to: 4

  # partition for lights on button 4
  - platform: partition
    name: "LEDs Button 4 Left"
    id: leds_button_4_left
    internal: true
    default_transition_length: 0.2s
    segments:
      - id: leds
        from: 17
        to: 17
  - platform: partition
    name: "LEDs Button 4 Right"
    id: leds_button_4_right
    internal: true
    default_transition_length: 0.2s
    segments:
      - id: leds
        from: 6
        to: 6

  # Partition for night light
  - platform: partition
    name: "Nightlight"
    id: leds_nightlight
    internal: False
    default_transition_length: 0.2s
    segments:
      - id: leds
        from: 0
        to: 31
    on_turn_off: 
      then:
        - script.execute: refresh_led_default
  # Partition for top leds
  - platform: partition
    name: "LEDs Top"
    id: leds_top
    internal: true
    segments:
      - id: leds
        from: 31
        to: 31
      - id: leds
        from: 0
        to: 8
    effects:
      - addressable_scan:
          name: "Scan"
      - addressable_rainbow:
          name: "Rainbow"
          speed: 10
          width: 20


media_player:
  - platform: i2s_audio
    id: media_out
    name: ${friendly_name} Player
    dac_type: external
    i2s_dout_pin: ${audio_sdata_pin}
    i2s_audio_id: audio_i2s
    i2s_comm_fmt: lsb
    mode: mono

i2s_audio:
  id: audio_i2s
  i2s_lrclk_pin: ${audio_lrclk_pin}
  i2s_bclk_pin: ${audio_bclk_pin}

uart:
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  id: my_uart
  baud_rate: 115200
  data_bits: 8
  stop_bits: 1
  parity: NONE
  debug:
    direction: RX
    dummy_receiver: false
    after:
      timeout: 2s
      bytes: 2048
    sequence:
      - lambda: UARTDebug::log_hex(direction, bytes, ' ');

tx_ultimate_touch:
  id: tx_touch
  uart: my_uart

  on_press:
    - script.execute: led_on_touch
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_press", "Touch Position: %d / State: %d", touch.x, touch.state);

  on_release:
    - script.execute:
        id: handle_release
        pos: !lambda "return touch.x;"

    - switch.turn_on: vibra

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_release", "Release Position: %d / State: %d", touch.x, touch.state);

  on_swipe_left:
    - script.execute: led_on_swipe_up

    - switch.turn_on: vibra

    - binary_sensor.template.publish:
        id: swipe_up
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_swipe_up", "Swipe Up Position: %d / State: %d", touch.x, touch.state);

  on_swipe_right:
    - script.execute: led_on_swipe_down

    - switch.turn_on: vibra

    - binary_sensor.template.publish:
        id: swipe_down
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_swipe_down", "Swipe Down Position: %d / State: %d", touch.x, touch.state);

  on_full_touch_release:
    - script.execute: led_on_full_touch

    - switch.turn_on: vibra

    - binary_sensor.template.publish:
        id: multi_touch
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_full_touch_release", "Full Touch Release Position: %d / State: %d", touch.x, touch.state);

  on_long_touch_release:
    - script.execute: led_on_long_touch

    - switch.turn_on: vibra

    - binary_sensor.template.publish:
        id: long_press
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_long_touch_release", "Long Touch Release Position: %d / State: %d", touch.x, touch.state);

time:
  - platform: homeassistant

script:
  - id: refresh_led_default
    mode: restart
    then:
  #     - if:
  #         condition:
  #           lambda: "return False;"
  #         then:
  #           # - light.turn_on: 
  #           #     id: leds_top
  #           #     brightness: ${nightlight_brightness}
  #           #     effect: "None"
  #           - script.execute: led_on_nightlight
          # else:
            # - light.turn_off: 
            #     id: leds_top
            # - light.turn_off: leds_nightlight 

      - if:
          condition:
            lambda: "return (id(relay_1).state) ;"
          then:
            - script.execute: led_on_button_1
          else:
            - script.execute: led_off_button_1

      - if:
          condition:
            lambda: "return id(relay_2).state;"
          then:
            - script.execute: led_on_button_2
          else:
            - script.execute: led_off_button_2
      
      - if:
          condition:
            lambda: "return (${relay_count}>=3 && id(relay_3).state);"
          then:
            - script.execute: led_on_button_3
          else:
            - script.execute: led_off_button_3
      
      - if:
          condition:
            lambda: "return (${relay_count}==4 && id(relay_4).state);"
          then:
            - script.execute: led_on_button_4
          else:
            - script.execute: led_off_button_4
  

  - id: led_on_button_1
    mode: restart
    then:
      - if:
          condition: # on lights Both option selected
            - lambda: 'return id(led_lights_on_side).state == "Both";'
          then:
            - light.turn_on:
                id: leds_button_1_left
                brightness: ${button_brightness}
                red: !lambda "return id(button_color)[0]/255.0;"
                green: !lambda "return id(button_color)[1]/255.0;"
                blue:  !lambda "return id(button_color)[2]/255.0;"
            - light.turn_on:
                id: leds_button_1_right
                brightness: ${button_brightness}
                red: !lambda "return id(button_color)[0]/255.0;"
                green: !lambda "return id(button_color)[1]/255.0;"
                blue:  !lambda "return id(button_color)[2]/255.0;"
      - if:
          condition: # on lights Left option selected
            - lambda: 'return id(led_lights_on_side).state == "Left";'
          then:
            - light.turn_on:
                id: leds_button_1_left
                brightness: ${button_brightness}
                red: !lambda "return id(button_color)[0]/255.0;"
                green: !lambda "return id(button_color)[1]/255.0;"
                blue:  !lambda "return id(button_color)[2]/255.0;"
      - if:
          condition: # on lights Right option selected
            - lambda: 'return id(led_lights_on_side).state == "Right";'
          then:
            - light.turn_on:
                id: leds_button_1_right
                brightness: ${button_brightness}
                red: !lambda "return id(button_color)[0]/255.0;"
                green: !lambda "return id(button_color)[1]/255.0;"
                blue:  !lambda "return id(button_color)[2]/255.0;"

  - id: led_on_button_2
    mode: restart
    then:
      - if:
          condition: # on lights Both option selected
            - lambda: 'return id(led_lights_on_side).state == "Both";'
          then:
            - light.turn_on:
                id: leds_button_2_left
                brightness: ${button_brightness}
                red: !lambda "return id(button_color)[0]/255.0;"
                green: !lambda "return id(button_color)[1]/255.0;"
                blue:  !lambda "return id(button_color)[2]/255.0;"
            - light.turn_on:
                id: leds_button_2_right
                brightness: ${button_brightness}
                red: !lambda "return id(button_color)[0]/255.0;"
                green: !lambda "return id(button_color)[1]/255.0;"
                blue:  !lambda "return id(button_color)[2]/255.0;"
      - if:
          condition: # on lights Left option selected
            - lambda: 'return id(led_lights_on_side).state == "Left";'
          then:
            - light.turn_on:
                id: leds_button_2_left
                brightness: ${button_brightness}
                red: !lambda "return id(button_color)[0]/255.0;"
                green: !lambda "return id(button_color)[1]/255.0;"
                blue:  !lambda "return id(button_color)[2]/255.0;"
      - if:
          condition: # on lights Right option selected
            - lambda: 'return id(led_lights_on_side).state == "Right";'
          then:
            - light.turn_on:
                id: leds_button_2_right
                brightness: ${button_brightness}
                red: !lambda "return id(button_color)[0]/255.0;"
                green: !lambda "return id(button_color)[1]/255.0;"
                blue:  !lambda "return id(button_color)[2]/255.0;"


  - id: led_on_button_3
    mode: restart
    then:
      - if:
          condition: # on lights Both option selected
            - lambda: 'return id(led_lights_on_side).state == "Both";'
          then:
            - light.turn_on:
                id: leds_button_3_left
                brightness: ${button_brightness}
                red: !lambda "return id(button_color)[0]/255.0;"
                green: !lambda "return id(button_color)[1]/255.0;"
                blue:  !lambda "return id(button_color)[2]/255.0;"
            - light.turn_on:
                id: leds_button_3_right
                brightness: ${button_brightness}
                red: !lambda "return id(button_color)[0]/255.0;"
                green: !lambda "return id(button_color)[1]/255.0;"
                blue:  !lambda "return id(button_color)[2]/255.0;"
      - if:
          condition: # on lights Left option selected
            - lambda: 'return id(led_lights_on_side).state == "Left";'
          then:
            - light.turn_on:
                id: leds_button_3_left
                brightness: ${button_brightness}
                red: !lambda "return id(button_color)[0]/255.0;"
                green: !lambda "return id(button_color)[1]/255.0;"
                blue:  !lambda "return id(button_color)[2]/255.0;"
      - if:
          condition: # on lights Right option selected
            - lambda: 'return id(led_lights_on_side).state == "Right";'
          then:
            - light.turn_on:
                id: leds_button_3_right
                brightness: ${button_brightness}
                red: !lambda "return id(button_color)[0]/255.0;"
                green: !lambda "return id(button_color)[1]/255.0;"
                blue:  !lambda "return id(button_color)[2]/255.0;"


  - id: led_on_button_4
    mode: restart
    then:
      - if:
          condition: # on lights Both option selected
            - lambda: 'return id(led_lights_on_side).state == "Both";'
          then:
            - light.turn_on:
                id: leds_button_4_left
                brightness: ${button_brightness}
                red: !lambda "return id(button_color)[0]/255.0;"
                green: !lambda "return id(button_color)[1]/255.0;"
                blue:  !lambda "return id(button_color)[2]/255.0;"
            - light.turn_on:
                id: leds_button_4_right
                brightness: ${button_brightness}
                red: !lambda "return id(button_color)[0]/255.0;"
                green: !lambda "return id(button_color)[1]/255.0;"
                blue:  !lambda "return id(button_color)[2]/255.0;"
      - if:
          condition: # on lights Left option selected
            - lambda: 'return id(led_lights_on_side).state == "Left";'
          then:
            - light.turn_on:
                id: leds_button_4_left
                brightness: ${button_brightness}
                red: !lambda "return id(button_color)[0]/255.0;"
                green: !lambda "return id(button_color)[1]/255.0;"
                blue:  !lambda "return id(button_color)[2]/255.0;"
      - if:
          condition: # on lights Right option selected
            - lambda: 'return id(led_lights_on_side).state == "Right";'
          then:
            - light.turn_on:
                id: leds_button_4_right
                brightness: ${button_brightness}
                red: !lambda "return id(button_color)[0]/255.0;"
                green: !lambda "return id(button_color)[1]/255.0;"
                blue:  !lambda "return id(button_color)[2]/255.0;"

  - id: led_off_button_1
    mode: restart
    then:
      - if:
          condition:
            - switch.is_off: do_not_disturb
          then:
            - if:
                condition: # off lights Both option selected
                  - lambda: 'return id(led_lights_off_side).state == "Both";'
                then:
                  - light.turn_on:
                      id: leds_button_1_left
                      brightness: ${button_brightness}
                      red: !lambda "return id(button_off_color)[0]/255.0;"
                      green: !lambda "return id(button_off_color)[1]/255.0;"
                      blue:  !lambda "return id(button_off_color)[2]/255.0;"
                  - light.turn_on:
                      id: leds_button_1_right
                      brightness: ${button_brightness}
                      red: !lambda "return id(button_off_color)[0]/255.0;"
                      green: !lambda "return id(button_off_color)[1]/255.0;"
                      blue:  !lambda "return id(button_off_color)[2]/255.0;"
            - if:
                condition: # off lights Left option selected
                  - lambda: 'return id(led_lights_off_side).state == "Left";'
                then:
                  - light.turn_on:
                      id: leds_button_1_left
                      brightness: ${button_brightness}
                      red: !lambda "return id(button_off_color)[0]/255.0;"
                      green: !lambda "return id(button_off_color)[1]/255.0;"
                      blue:  !lambda "return id(button_off_color)[2]/255.0;"
            - if:
                condition: # off lights Right option selected
                  - lambda: 'return id(led_lights_off_side).state == "Right";'
                then:
                  - light.turn_on:
                      id: leds_button_1_right
                      brightness: ${button_brightness}
                      red: !lambda "return id(button_off_color)[0]/255.0;"
                      green: !lambda "return id(button_off_color)[1]/255.0;"
                      blue:  !lambda "return id(button_off_color)[2]/255.0;"

          else:
            - light.turn_off:
                id: leds_button_1_left
            - light.turn_off:
                id: leds_button_1_right

  - id: led_off_button_2
    mode: restart
    then:
      - if:
          condition:
            - switch.is_off: do_not_disturb
          then:
            - if:
                condition: # off lights Both option selected
                  - lambda: 'return id(led_lights_off_side).state == "Both";'
                then:
                  - light.turn_on:
                      id: leds_button_2_left
                      brightness: ${button_brightness}
                      red: !lambda "return id(button_off_color)[0]/255.0;"
                      green: !lambda "return id(button_off_color)[1]/255.0;"
                      blue:  !lambda "return id(button_off_color)[2]/255.0;"
                  - light.turn_on:
                      id: leds_button_2_right
                      brightness: ${button_brightness}
                      red: !lambda "return id(button_off_color)[0]/255.0;"
                      green: !lambda "return id(button_off_color)[1]/255.0;"
                      blue:  !lambda "return id(button_off_color)[2]/255.0;"
            - if:
                condition: # off lights Left option selected
                  - lambda: 'return id(led_lights_off_side).state == "Left";'
                then:
                  - light.turn_on:
                      id: leds_button_2_left
                      brightness: ${button_brightness}
                      red: !lambda "return id(button_off_color)[0]/255.0;"
                      green: !lambda "return id(button_off_color)[1]/255.0;"
                      blue:  !lambda "return id(button_off_color)[2]/255.0;"
            - if:
                condition: # off lights Right option selected
                  - lambda: 'return id(led_lights_off_side).state == "Right";'
                then:
                  - light.turn_on:
                      id: leds_button_2_right
                      brightness: ${button_brightness}
                      red: !lambda "return id(button_off_color)[0]/255.0;"
                      green: !lambda "return id(button_off_color)[1]/255.0;"
                      blue:  !lambda "return id(button_off_color)[2]/255.0;"
          else:
            - light.turn_off:
                id: leds_button_2_left
            - light.turn_off:
                id: leds_button_2_right


  - id: led_off_button_3
    mode: restart
    then:
      - if:
          condition:
            - switch.is_off: do_not_disturb
          then:
            - if:
                condition: # off lights Both option selected
                  - lambda: 'return id(led_lights_off_side).state == "Both";'
                then:
                  - light.turn_on:
                      id: leds_button_3_left
                      brightness: ${button_brightness}
                      red: !lambda "return id(button_off_color)[0]/255.0;"
                      green: !lambda "return id(button_off_color)[1]/255.0;"
                      blue:  !lambda "return id(button_off_color)[2]/255.0;"
                  - light.turn_on:
                      id: leds_button_3_right
                      brightness: ${button_brightness}
                      red: !lambda "return id(button_off_color)[0]/255.0;"
                      green: !lambda "return id(button_off_color)[1]/255.0;"
                      blue:  !lambda "return id(button_off_color)[2]/255.0;"
            - if:
                condition: # off lights Left option selected
                  - lambda: 'return id(led_lights_off_side).state == "Left";'
                then:
                  - light.turn_on:
                      id: leds_button_3_left
                      brightness: ${button_brightness}
                      red: !lambda "return id(button_off_color)[0]/255.0;"
                      green: !lambda "return id(button_off_color)[1]/255.0;"
                      blue:  !lambda "return id(button_off_color)[2]/255.0;"
            - if:
                condition: # off lights Right option selected
                  - lambda: 'return id(led_lights_off_side).state == "Right";'
                then:
                  - light.turn_on:
                      id: leds_button_3_right
                      brightness: ${button_brightness}
                      red: !lambda "return id(button_off_color)[0]/255.0;"
                      green: !lambda "return id(button_off_color)[1]/255.0;"
                      blue:  !lambda "return id(button_off_color)[2]/255.0;"
          else:
            - light.turn_off:
                id: leds_button_3_left
            - light.turn_off:
                id: leds_button_3_right
  
  - id: led_off_button_4
    mode: restart
    then:
      - if:
          condition:
            - switch.is_off: do_not_disturb
          then:
            - if:
                condition: # off lights Both option selected
                  - lambda: 'return id(led_lights_off_side).state == "Both";'
                then:
                  - light.turn_on:
                      id: leds_button_4_left
                      brightness: ${button_brightness}
                      red: !lambda "return id(button_off_color)[0]/255.0;"
                      green: !lambda "return id(button_off_color)[1]/255.0;"
                      blue:  !lambda "return id(button_off_color)[2]/255.0;"
                  - light.turn_on:
                      id: leds_button_4_right
                      brightness: ${button_brightness}
                      red: !lambda "return id(button_off_color)[0]/255.0;"
                      green: !lambda "return id(button_off_color)[1]/255.0;"
                      blue:  !lambda "return id(button_off_color)[2]/255.0;"
            - if:
                condition: # off lights Left option selected
                  - lambda: 'return id(led_lights_off_side).state == "Left";'
                then:
                  - light.turn_on:
                      id: leds_button_4_left
                      brightness: ${button_brightness}
                      red: !lambda "return id(button_off_color)[0]/255.0;"
                      green: !lambda "return id(button_off_color)[1]/255.0;"
                      blue:  !lambda "return id(button_off_color)[2]/255.0;"
            - if:
                condition: # off lights Right option selected
                  - lambda: 'return id(led_lights_off_side).state == "Right";'
                then:
                  - light.turn_on:
                      id: leds_button_4_right
                      brightness: ${button_brightness}
                      red: !lambda "return id(button_off_color)[0]/255.0;"
                      green: !lambda "return id(button_off_color)[1]/255.0;"
                      blue:  !lambda "return id(button_off_color)[2]/255.0;"
          else:
            - light.turn_off:
                id: leds_button_4_left
            - light.turn_off:
                id: leds_button_4_right


  - id: led_on_nightlight
    mode: restart
    then:
      - light.turn_on:
          id: leds_nightlight
          brightness: ${nightlight_brightness}
          red: !lambda "return id(nightlight_color)[0]/255.0;"
          green: !lambda "return id(nightlight_color)[1]/255.0;"
          blue:  !lambda "return id(nightlight_color)[2]/255.0;"

  - id: led_on_release
    mode: restart
    then:
      - light.turn_off:
          id: leds_top

  - id: led_on_touch
    mode: restart
    then:
      # - light.turn_on:
      #     id: leds_top
      #     brightness: ${touch_brightness}
      #     red: !lambda "return id(touch_color)[0]/255.0;"
      #     green: !lambda "return id(touch_color)[1]/255.0;"
      #     blue:  !lambda "return id(touch_color)[2]/255.0;"
      #     effect: "None"
      - delay: 6s
      - script.execute: refresh_led_default

  - id: led_on_swipe_up
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${swipe_up_brightness}
          red: !lambda "return id(swipe_up_color)[0]/255.0;"
          green: !lambda "return id(swipe_up_color)[1]/255.0;"
          blue:  !lambda "return id(swipe_up_color)[2]/255.0;"
          effect: ${swipe_left_effect}

  - id: led_on_swipe_down
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${swipe_down_brightness}
          red: !lambda "return id(swipe_down_color)[0]/255.0;"
          green: !lambda "return id(swipe_down_color)[1]/255.0;"
          blue:  !lambda "return id(swipe_down_color)[2]/255.0;"
          effect: ${swipe_down_effect}

  - id: led_on_full_touch
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${multi_touch_brightness}
          red: !lambda "return id(multi_touch_color)[0]/255.0;"
          green: !lambda "return id(multi_touch_color)[1]/255.0;"
          blue:  !lambda "return id(multi_touch_color)[2]/255.0;"
          effect: ${multi_touch_effect}


  - id: led_on_long_touch
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${long_press_brightness}
          red: !lambda "return id(long_press_color)[0]/255.0;"
          green: !lambda "return id(long_press_color)[1]/255.0;"
          blue:  !lambda "return id(long_press_color)[2]/255.0;"
          effect: ${long_press_effect}


  - id: handle_release
    mode: restart
    parameters:
      pos: int
    then:
      - if:
          condition:
            lambda: "return ${relay_count}==1;"
          then:
            - binary_sensor.template.publish:
                id: touchfield_1
                state: ON

      - if:
          condition:
            lambda: "return ${relay_count}==2;"
          then:
            - if:
                condition:
                  lambda: "return pos <= 5;"
                then:
                  - binary_sensor.template.publish:
                      id: touchfield_1
                      state: ON

                else:
                  - binary_sensor.template.publish:
                      id: touchfield_2
                      state: ON

      - if:
          condition:
            lambda: "return ${relay_count}==3;"
          then:
            - if:
                condition:
                  lambda: "return pos <= 3;"
                then:
                  - binary_sensor.template.publish:
                      id: touchfield_1
                      state: ON

                else:
                  - if:
                      condition:
                        lambda: "return pos <= 7;"
                      then:
                        - binary_sensor.template.publish:
                            id: touchfield_2
                            state: ON

                      else:
                        - binary_sensor.template.publish:
                            id: touchfield_3
                            state: ON

      - if:
          condition:
            lambda: "return ${relay_count}==4;"
          then:
            - if:
                condition:
                  lambda: "return pos <= 2;"
                then:
                  - binary_sensor.template.publish:
                      id: touchfield_1
                      state: ON

                else:
                  - if:
                      condition:
                        lambda: "return pos <= 5;"
                      then:
                        - binary_sensor.template.publish:
                            id: touchfield_2
                            state: ON

                      else:
                        - if:
                            condition:
                              lambda: "return pos <= 8;"
                            then:
                              - binary_sensor.template.publish:
                                  id: touchfield_3
                                  state: ON
                            
                            else:
                              - binary_sensor.template.publish:
                                  id: touchfield_4
                                  state: ON

  - id: touch_led_marker
    mode: restart
    parameters:
      state: int
      pos: int
    then:
      - if:
          condition:
            lambda: "return state==1;"
          then:
            # RELEASE
            - light.turn_off: leds

          else:
            - if:
                condition:
                  lambda: "return state==2;"
                then:
                  # TOUCH
                  - light.turn_on:
                      id: leds
                      red: 1
                      green: 0
                      blue: 0
                  - delay: 6s
                  - light.turn_off: leds

                else:
                  - if:
                      condition:
                        lambda: "return state==11;"
                      then:
                        # FULL-TOUCH RELEASE
                        - light.turn_on:
                            id: leds
                            effect: "Rainbow"
                        - delay: 1s
                        - light.turn_off: leds

                      else:
                        # SWIPE
                        - if:
                            condition:
                              lambda: "return state==13;"
                            then:
                              # SWIPE LEFT
                              - light.turn_on:
                                  id: leds
                                  red: 0
                                  green: 1
                                  blue: 0

                        - if:
                            condition:
                              lambda: "return state==12;"
                            then:
                              # SWIPE RIGHT
                              - light.turn_on:
                                  id: leds
                                  red: 0
                                  green: 0
                                  blue: 1
                        - delay: 1s
                        - light.turn_off: leds

